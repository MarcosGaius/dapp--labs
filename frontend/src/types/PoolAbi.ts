/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PoolAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "OWNER_ROLE"
      | "bltm"
      | "depositUsdc"
      | "exchangeRate"
      | "getExchangeRate"
      | "getPoolPairAddresses"
      | "getRoleAdmin"
      | "getRoyaltyTax"
      | "grantRole"
      | "hasRole"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "royaltyTax"
      | "setRoyaltyTax"
      | "supportsInterface"
      | "swapBltmForUsdc"
      | "swapUsdcForBltm"
      | "unpause"
      | "updateExchangeRate"
      | "usdc"
      | "withdrawUsdc"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExchangeRateUpdated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "RoyaltyTaxUpdated"
      | "SwapBLTMForUSDC"
      | "SwapUSDCForBLTM"
      | "USDCDeposited"
      | "USDCWithdrawn"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "OWNER_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "bltm", values?: undefined): string;
  encodeFunctionData(functionFragment: "depositUsdc", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "exchangeRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "getExchangeRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPoolPairAddresses", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getRoyaltyTax", values?: undefined): string;
  encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
  encodeFunctionData(functionFragment: "royaltyTax", values?: undefined): string;
  encodeFunctionData(functionFragment: "setRoyaltyTax", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "swapBltmForUsdc", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "swapUsdcForBltm", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "updateExchangeRate", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdrawUsdc", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OWNER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bltm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositUsdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchangeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getExchangeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoolPairAddresses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoyaltyTax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "royaltyTax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoyaltyTax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapBltmForUsdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapUsdcForBltm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateExchangeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawUsdc", data: BytesLike): Result;
}

export namespace ExchangeRateUpdatedEvent {
  export type InputTuple = [newRate: BigNumberish];
  export type OutputTuple = [newRate: bigint];
  export interface OutputObject {
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [role: BytesLike, previousAdminRole: BytesLike, newAdminRole: BytesLike];
  export type OutputTuple = [role: string, previousAdminRole: string, newAdminRole: string];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike, sender: AddressLike];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyTaxUpdatedEvent {
  export type InputTuple = [newTax: BigNumberish];
  export type OutputTuple = [newTax: bigint];
  export interface OutputObject {
    newTax: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapBLTMForUSDCEvent {
  export type InputTuple = [user: AddressLike, bltmAmount: BigNumberish, usdcAmount: BigNumberish];
  export type OutputTuple = [user: string, bltmAmount: bigint, usdcAmount: bigint];
  export interface OutputObject {
    user: string;
    bltmAmount: bigint;
    usdcAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapUSDCForBLTMEvent {
  export type InputTuple = [user: AddressLike, usdcAmount: BigNumberish, bltmAmount: BigNumberish];
  export type OutputTuple = [user: string, usdcAmount: bigint, bltmAmount: bigint];
  export interface OutputObject {
    user: string;
    usdcAmount: bigint;
    bltmAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace USDCDepositedEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace USDCWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PoolAbi extends BaseContract {
  connect(runner?: ContractRunner | null): PoolAbi;
  waitForDeployment(): Promise<this>;

  interface: PoolAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OWNER_ROLE: TypedContractMethod<[], [string], "view">;

  bltm: TypedContractMethod<[], [string], "view">;

  depositUsdc: TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;

  exchangeRate: TypedContractMethod<[], [bigint], "view">;

  getExchangeRate: TypedContractMethod<[], [bigint], "view">;

  getPoolPairAddresses: TypedContractMethod<[], [[string, string]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoyaltyTax: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;

  hasRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<[role: BytesLike, callerConfirmation: AddressLike], [void], "nonpayable">;

  revokeRole: TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;

  royaltyTax: TypedContractMethod<[], [bigint], "view">;

  setRoyaltyTax: TypedContractMethod<[newTax: BigNumberish], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  swapBltmForUsdc: TypedContractMethod<[bltmAmount: BigNumberish], [void], "nonpayable">;

  swapUsdcForBltm: TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateExchangeRate: TypedContractMethod<[rate: BigNumberish], [void], "nonpayable">;

  usdc: TypedContractMethod<[], [string], "view">;

  withdrawUsdc: TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "OWNER_ROLE"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "bltm"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "depositUsdc"): TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "exchangeRate"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "getExchangeRate"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "getPoolPairAddresses"): TypedContractMethod<[], [[string, string]], "view">;
  getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(nameOrSignature: "getRoyaltyTax"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [boolean], "view">;
  getFunction(nameOrSignature: "pause"): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(nameOrSignature: "paused"): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<[role: BytesLike, callerConfirmation: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[role: BytesLike, account: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "royaltyTax"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "setRoyaltyTax"): TypedContractMethod<[newTax: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(nameOrSignature: "swapBltmForUsdc"): TypedContractMethod<[bltmAmount: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "swapUsdcForBltm"): TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "unpause"): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(nameOrSignature: "updateExchangeRate"): TypedContractMethod<[rate: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "usdc"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "withdrawUsdc"): TypedContractMethod<[usdcAmount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ExchangeRateUpdated"
  ): TypedContractEvent<ExchangeRateUpdatedEvent.InputTuple, ExchangeRateUpdatedEvent.OutputTuple, ExchangeRateUpdatedEvent.OutputObject>;
  getEvent(key: "Paused"): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
  getEvent(
    key: "RoyaltyTaxUpdated"
  ): TypedContractEvent<RoyaltyTaxUpdatedEvent.InputTuple, RoyaltyTaxUpdatedEvent.OutputTuple, RoyaltyTaxUpdatedEvent.OutputObject>;
  getEvent(
    key: "SwapBLTMForUSDC"
  ): TypedContractEvent<SwapBLTMForUSDCEvent.InputTuple, SwapBLTMForUSDCEvent.OutputTuple, SwapBLTMForUSDCEvent.OutputObject>;
  getEvent(
    key: "SwapUSDCForBLTM"
  ): TypedContractEvent<SwapUSDCForBLTMEvent.InputTuple, SwapUSDCForBLTMEvent.OutputTuple, SwapUSDCForBLTMEvent.OutputObject>;
  getEvent(
    key: "USDCDeposited"
  ): TypedContractEvent<USDCDepositedEvent.InputTuple, USDCDepositedEvent.OutputTuple, USDCDepositedEvent.OutputObject>;
  getEvent(
    key: "USDCWithdrawn"
  ): TypedContractEvent<USDCWithdrawnEvent.InputTuple, USDCWithdrawnEvent.OutputTuple, USDCWithdrawnEvent.OutputObject>;
  getEvent(key: "Unpaused"): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

  filters: {
    "ExchangeRateUpdated(uint256)": TypedContractEvent<
      ExchangeRateUpdatedEvent.InputTuple,
      ExchangeRateUpdatedEvent.OutputTuple,
      ExchangeRateUpdatedEvent.OutputObject
    >;
    ExchangeRateUpdated: TypedContractEvent<
      ExchangeRateUpdatedEvent.InputTuple,
      ExchangeRateUpdatedEvent.OutputTuple,
      ExchangeRateUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;

    "RoyaltyTaxUpdated(uint256)": TypedContractEvent<
      RoyaltyTaxUpdatedEvent.InputTuple,
      RoyaltyTaxUpdatedEvent.OutputTuple,
      RoyaltyTaxUpdatedEvent.OutputObject
    >;
    RoyaltyTaxUpdated: TypedContractEvent<
      RoyaltyTaxUpdatedEvent.InputTuple,
      RoyaltyTaxUpdatedEvent.OutputTuple,
      RoyaltyTaxUpdatedEvent.OutputObject
    >;

    "SwapBLTMForUSDC(address,uint256,uint256)": TypedContractEvent<
      SwapBLTMForUSDCEvent.InputTuple,
      SwapBLTMForUSDCEvent.OutputTuple,
      SwapBLTMForUSDCEvent.OutputObject
    >;
    SwapBLTMForUSDC: TypedContractEvent<
      SwapBLTMForUSDCEvent.InputTuple,
      SwapBLTMForUSDCEvent.OutputTuple,
      SwapBLTMForUSDCEvent.OutputObject
    >;

    "SwapUSDCForBLTM(address,uint256,uint256)": TypedContractEvent<
      SwapUSDCForBLTMEvent.InputTuple,
      SwapUSDCForBLTMEvent.OutputTuple,
      SwapUSDCForBLTMEvent.OutputObject
    >;
    SwapUSDCForBLTM: TypedContractEvent<
      SwapUSDCForBLTMEvent.InputTuple,
      SwapUSDCForBLTMEvent.OutputTuple,
      SwapUSDCForBLTMEvent.OutputObject
    >;

    "USDCDeposited(address,uint256)": TypedContractEvent<
      USDCDepositedEvent.InputTuple,
      USDCDepositedEvent.OutputTuple,
      USDCDepositedEvent.OutputObject
    >;
    USDCDeposited: TypedContractEvent<USDCDepositedEvent.InputTuple, USDCDepositedEvent.OutputTuple, USDCDepositedEvent.OutputObject>;

    "USDCWithdrawn(address,uint256)": TypedContractEvent<
      USDCWithdrawnEvent.InputTuple,
      USDCWithdrawnEvent.OutputTuple,
      USDCWithdrawnEvent.OutputObject
    >;
    USDCWithdrawn: TypedContractEvent<USDCWithdrawnEvent.InputTuple, USDCWithdrawnEvent.OutputTuple, USDCWithdrawnEvent.OutputObject>;

    "Unpaused(address)": TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
  };
}
